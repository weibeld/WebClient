import bcrypt from 'bcryptjs';
import getRandomValues from 'get-random-values';
import { binaryStringToArray, arrayToBinaryString, encodeBase64, decodeBase64 } from 'pmcrypto';

import { BCRYPT_PREFIX } from './constants';

/**
 * Compute the key password.
 * @param {String} password plaintext password
 * @param {String} salt base 64 encoded string
 * @returns {Promise<String>}
 */
export const computeKeyPassword = async (password, salt) => {

    console.log(`[Call] pm-srp.computeKeyPassword()
password: ${password}
salt: ${salt}`); 

    if (!password || !salt || salt.length !== 24 || password.length < 1) {
        throw new Error('Password and salt required.');
    }
    const saltBinary = binaryStringToArray(decodeBase64(salt));
    const saltBcrypt = BCRYPT_PREFIX + bcrypt.encodeBase64(saltBinary, 16);

    console.log(`[Executing] pm-srp.computeKeyPassword()
Salt (before): ${salt}
Salt (binary): ${saltBinary}
Salt (after): ${BCRYPT_PREFIX + bcrypt.encodeBase64(saltBinary, 16)}`);

    const hash = await bcrypt.hash(password, saltBcrypt);
    // Remove bcrypt prefix and salt (first 29 characters)

    const result = hash.slice(29)
    console.log(`[Return] pm-srp.computeKeyPassword()\n${result}`);

    return result;
};

/**
 * Generate salt for a key.
 * @returns {String}
 */
export const generateKeySalt = () => {
    console.log(`[Call] pm-srp.generateKeySalt()`); 
    const keySalt = encodeBase64(arrayToBinaryString(getRandomValues(new Uint8Array(16))));
    console.log(`[Return] pm-srp.generateKeySalt()\n${keySalt}`); 
    return keySalt;
}
